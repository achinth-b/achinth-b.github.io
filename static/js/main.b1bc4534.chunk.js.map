{"version":3,"sources":["components/Dimension.js","App.js","reportWebVitals.js","index.js"],"names":["Listening","props","ref","useRef","useState","hovered","setHover","active","setActive","useFrame","current","rotation","x","y","scale","onClick","e","onPointerOver","onPointerOut","args","color","Dimension","className","position","OrbitControls","screenSpacePanning","require","config","App","year","Date","email","linkedin","github","substack","title","options","strings","autoStart","cursor","loop","location","subtitle","href","workVibe","links","window","open","getFullYear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAqCA,SAASA,EAAUC,GAEjB,IAAMC,EAAMC,mBAEZ,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAKA,OAHAC,aAAS,WACPP,EAAIQ,QAAQC,SAASC,EAAIV,EAAIQ,QAAQC,SAASE,GAAK,OAGnD,iDACMZ,GADN,IAEEC,IAAKA,EACLY,MAAOP,EAAS,IAAM,EACtBQ,QAAS,SAACC,GAAD,OAAOR,GAAWD,IAC3BU,cAAe,SAACD,GAAD,OAAOV,GAAS,IAC/BY,aAAc,SAACF,GAAD,OAAOV,GAAS,IANhC,UAQE,+BAAea,KAAM,CAAC,EAAG,EAAG,GAAI,OAChC,oCAAoBC,MAAOf,EAAU,UAAY,eA6BxC,SAASgB,IAEpB,OAEI,qBAAKC,UAAU,SAAf,SAIA,eAAC,IAAD,WACE,cAACtB,EAAD,CAAWuB,SAAU,CAAC,EAAG,EAAG,KAC5B,cAACC,EAAA,EAAD,CAAeC,oBAAkB,SA1F3CC,EAAQ,IAAUC,S,qBC0GHC,MAzGf,WACE,IAAIC,EAAO,IAAIC,KACTC,EAAQ,cAAC,IAAD,CAAYT,UAAU,SAC9BU,EAAW,cAAC,IAAD,CAAYV,UAAU,SACjCW,EAAS,cAAC,IAAD,CAAUX,UAAU,SAC7BY,EAAW,cAAC,IAAD,CAAYZ,UAAU,SAGjCa,EACJ,qBAAKb,UAAU,QAAf,SACE,cAAC,IAAD,CACEc,QAAS,CACPC,QAAS,CAAC,oBAAqB,qBAC/BC,WAAW,EACXC,OAAQ,GACRC,MAAM,OAMRC,EACJ,qBAAKnB,UAAU,MAAf,8CAKIoB,EACJ,sBAAKpB,UAAU,MAAf,yCAC8B,mBAAGqB,KAAO,oBAAV,kBAD9B,mBAEe,mBAAGA,KAAK,2BAAR,uBAFf,eAE2E,mBAAGA,KAAO,0GAAV,kBAF3E,KAEyM,0BAIrMC,EACJ,sBAAKtB,UAAU,MAAf,oBACS,mBAAGqB,KAAK,kCAAR,mBADT,iBAC0E,mBAAGA,KAAK,oBAAR,oBAD1E,eAC4H,mBAAGA,KAAK,yBAAR,uBAD5H,iBACwL,mBAAGA,KAAK,+DAAR,qBADxL,uBAGG,uBAHH,6GASIE,EACJ,gCACE,wBACEvB,UAAU,SACVP,QAAS,kBAAM+B,OAAOC,KAAK,qCAF7B,SAIGf,IAGH,wBACEV,UAAU,SACVP,QAAS,kBAAM+B,OAAOC,KAAK,iCAF7B,SAIGd,IAGH,wBACEX,UAAU,SACVP,QAAS,kBACP+B,OAAOC,KAAK,uDAHhB,SAMGhB,IAGH,wBACET,UAAU,SACVP,QAAS,kBACP+B,OAAOC,KAAK,iCAHhB,SAMGb,OAKP,OAEI,sBAAKZ,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACGa,EAGD,cAACd,EAAD,IACCoB,EACAC,EACAE,EAED,uBACCC,KAGH,sBAAKvB,UAAU,SAAf,kDAE2BO,EAAKmB,cAFhC,IAEgD,WC7FzCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b1bc4534.chunk.js","sourcesContent":["// import * as THREE from \"three\";\nimport React, { useRef, useState } from \"react\";\nimport './dimensions.css'\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\n\nrequire(\"dotenv\").config();\n// let result;\n\n// const bools = async () => {\n//   var data = \"\";\n//   var config = {\n//     method: \"get\",\n//     url: \"https://api.spotify.com/v1/me/player/currently-playing\",\n//     headers: {\n//       Accept: \"application/json\",\n//       \"Content-Type\": \"application/json\",\n//       Authorization:\n//         \"Bearer BQCSapb5W3vGi867hoJHXOhpR49B9O7AIrAyeNXnfHA5FsGnjSOOaNz99UPmigxSQdm1SpEMqa-eKY_QYh8-ykzDrEZSvKoi8ztTneoGnkd2OuAStFRV9po58ySdaDFhvL0Qxw2W1RDCBHX-ON-IhQ\",\n//     },\n//   };\n\n//   axios(config)\n//     .then(function(response) {\n//       let data = JSON.parse(JSON.stringify(response.data));\n//       result = data;\n//       console.log(data[\"is_playing\"]);\n//       return data[\"is_playing\"];\n//     })\n//     .catch(function(error) {\n//       console.log(error);\n//       return false;\n//     });\n// };\n\n// let amIListening = bools();\n\nfunction Listening(props) {\n  // This reference will give us direct access to the mesh\n  const ref = useRef();\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    ref.current.rotation.x = ref.current.rotation.y += 0.01;\n  });\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={active ? 1.5 : 1}\n      onClick={(e) => setActive(!active)}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}\n    >\n      <torusGeometry args={[2, 1, 64, 200]} />\n      <meshNormalMaterial color={hovered ? \"hotpink\" : \"orange\"} />\n    </mesh>\n  );\n}\n\nfunction NotListening(props) {\n  const ref = useRef();\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  // Rotate mesh every frame, this is outside of React without overhead\n  // useFrame(() => {\n  //   ref.current.rotation.x = ref.current.rotation.y += 0.01\n  // })\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={active ? 1.5 : 1}\n      onClick={(e) => setActive(!active)}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}\n    >\n      <torusGeometry args={[4, 2, 128, 400]} />\n      <meshStandardMaterial color={hovered ? \"indianred\" : \"green\"} />\n    </mesh>\n  );\n}\n\nexport default function Dimension() {\n  \n    return (\n\n        <div className=\"canvas\">\n\n        \n    \n        <Canvas >\n          <Listening position={[0, 0, 0]} />\n          <OrbitControls screenSpacePanning />\n        </Canvas>\n\n        </div>\n       \n      \n    );\n  }\n\n","import React from \"react\";\nimport \"./App.css\";\nimport { FaLinkedin, FaEnvelope, FaGithub} from \"react-icons/fa\";\nimport {SiSubstack} from \"react-icons/si\";\nimport Dimension from \"./components/Dimension\";\nimport Typewriter from \"typewriter-effect\";\n\nfunction App() {\n  let year = new Date();\n  const email = <FaEnvelope className=\"icon\" />;\n  const linkedin = <FaLinkedin className=\"icon\" />;\n  const github = <FaGithub className=\"icon\" />;\n  const substack = <SiSubstack className=\"icon\" />;\n  \n\n  const title = (\n    <div className=\"title\">\n      <Typewriter\n        options={{\n          strings: [\"achinth bharadwaj\", \"@bigdaddytwochinz\"],\n          autoStart: true,\n          cursor: \"\",\n          loop: true,\n        }}\n      />\n    </div>\n  );\n\n  const location = (\n    <div className=\"sub\">\n      üìç nyc / vancouver, bc\n    </div>\n  )\n\n  const subtitle = (\n    <div className=\"sub\">\n      fifth-year cs + stats major <a href = \"https://cs.ubc.ca\">@ubc</a> /\n      about to ft  <a href='https://www.palantir.com'>@palantir</a> / research <a href = \"https://www.cs.ubc.ca/students/undergrad/research-and-conferences/undergraduate-student-research-awards\">@ubc</a>. <br />\n    </div>\n  );\n\n  const workVibe = (\n    <div className=\"sub\">\n      former <a href='https://about.facebook.com/meta'>@meta</a> summer '22 / <a href='https://tesla.com'>@tesla</a> fall '21 / <a href='https://covalenthq.com'>@covalent</a> summer '21 / <a href='https://www.boeing.ca/boeing-in-canada/boeing-vancouver.page'>@boeing</a> winter & summer '20\n    \n       <br />\n      always hunting for ventures and fellowships in machine learning,\n      software engineering and data science.\n    </div>\n  );\n\n  const links = (\n    <div>\n      <button\n        className=\"button\"\n        onClick={() => window.open(\"https://linkedin.com/in/achinthb\")}\n      >\n        {linkedin}\n      </button>\n\n      <button\n        className=\"button\"\n        onClick={() => window.open(\"https://github.com/achinth-b\")}\n      >\n        {github}\n      </button>\n\n      <button\n        className=\"button\"\n        onClick={() =>\n          window.open(\"mailto:achinth@student.ubc.ca?subject=Hey Achinth!\")\n        }\n      >\n        {email}\n      </button>\n\n      <button\n        className=\"button\"\n        onClick={() =>\n          window.open(\"https://achinth.substack.com\")\n        }\n      >\n        {substack}\n      </button>\n    </div>\n  );\n\n  return (\n    \n      <div className=\"App\">\n        <div className=\"App-header\">\n          {title}\n\n          \n          <Dimension />\n          {location}\n          {subtitle}\n          {workVibe}\n\n          <br />\n          {links}\n        </div>\n\n        <div className=\"footer\">\n         \n          made with üíñ, achinth ¬© {year.getFullYear()}.{\" \"}\n        </div>\n      </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}